# ---------------------------------------------------------------
# Global
# ---------------------------------------------------------------

# default image
image: node:14-slim

stages:
  - build
  - alt_build
#  - test
  - release
  - docker
  - docs

# ---------------------------------------------------------------
# Global variables
# ---------------------------------------------------------------

variables:
  DOCKER_IMAGE_REGISTRY: gitlab-registry.ifremer.fr/ifremer-commons/docker/images/
  CI_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:develop
  BUILD_ENVIRONMENT: prod
  ARTIFACT_ZIP_FILES: ${OUTPUT_DIR}/${CI_PROJECT_NAME}-*.zip

# ---------------------------------------------------------------
# Jobs templates
# ---------------------------------------------------------------
.configure-git-template: &git-setup
  before_script:
    - echo "fetch origin"
    - git remote set-url origin "https://gitlab+access-token:${CI_ACCESS_TOKEN}@gitlab.ifremer.fr/${CI_PROJECT_PATH}.git"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git fetch origin
  tags: [sih_public_runner]

.docker:
  image: docker:latest
  tags: [sih_public_runner]
  services:
    - docker:dind
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  after_script:
    - docker logout ${CI_REGISTRY}
  allow_failure: false

# ---------------------------------------------------------------
# Build jobs
# ---------------------------------------------------------------

.build:
  stage: build
  tags: [sih_public_runner]
  script:
    # Update dependencies
    - scripts/ci/dependencies.sh check || yarn install
    - yarn run build.${BUILD_ENVIRONMENT}
  after_script:
    # Remember version
    - APP_VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "APP_VERSION=${APP_VERSION}" > variables.env
  artifacts:
    paths:
      - www
    reports:
      dotenv: variables.env
    expire_in: 72 hours

build:
  extends: .build
  image: ${CI_BUILD_IMAGE}
  before_script:
    # Get project dependencies
    - cp -R /tmp/.build-cache/node_modules .
  variables:
    BUILD_ENVIRONMENT: dev
  except:
    - tags
    - master

failsafe-build:
  extends: .build
  stage: alt_build
  when: on_failure
  before_script:
    # Install global dependencies
    - yarn global add @ionic/cli@6.19.1 @angular/cli@11.2.19
    # Update project dependencies
    - yarn install
  variables:
    BUILD_ENVIRONMENT: dev
  except:
    - tags
    - master

docker:ci:
  extends: .docker
  stage: alt_build
  when: on_failure
  allow_failure: true
  script:
    # Build and push the CI image
    - docker build --cache-from ${CI_BUILD_IMAGE} --pull -t ${CI_BUILD_IMAGE} -f scripts/ci/Dockerfile .
    #- docker build --no-cache -t ${CI_BUILD_IMAGE} -f target/ci/DockerFile .
    - docker push ${CI_BUILD_IMAGE}
  except:
    - tags
    - master

# ---------------------------------------------------------------
# Release jobs
# ---------------------------------------------------------------
.release:
  <<: *git-setup
  stage: release
  script:
      - if [[ "_${RELEASE_VERSION}" == "_" ]]; then echo "Missing required 'RELEASE_VERSION' pipeline property!" && exit 1; fi
      - echo "--- Release in progress"
      - git checkout -b release/${RELEASE_VERSION}
      - echo "--- Manage app version"
      - 'currentAndroid=`grep -oP "android-versionCode=\"[0-9]+\"" config.xml | grep -oP "\d+"`'
      - 'IFS="."'
      - 'read -ra SPLITED_VERSION <<< "${RELEASE_VERSION}"'
      - 'IFS="-"'
      - 'read -ra SPLITED_PATCH <<< "${SPLITED_VERSION[2]}"'
      - 'major2d=$(printf %02d ${SPLITED_VERSION[0]}) ; minor2d=$(printf %02d ${SPLITED_VERSION[1]}) ; patch2d=$(printf %02d ${SPLITED_PATCH[0]})'
      - 'androidVersion=$major2d$minor2d$patch2d'
      - 'current=`grep -oP "version\": \"\d+.\d+.\d+(-(alpha|beta|rc)[0-9]+)?" package.json | grep -m 1 -oP "\d+.\d+.\d+(-(alpha|beta|rc)[0-9]+)?"`'
      - 'sed -i "s/version\": \"$current\"/version\": \"${RELEASE_VERSION}\"/g" package.json'
      - 'currentConfigXmlVersion=`grep -oP "version=\"\d+.\d+.\d+(-(alpha|beta|rc)[0-9]+)?\"" config.xml | grep -oP "\d+.\d+.\d+(-(alpha|beta|rc)[0-9]+)?"`'
      - 'sed -i "s/ version=\"$currentConfigXmlVersion\"/ version=\"${RELEASE_VERSION}\"/g" config.xml'
      - 'sed -i "s/ android-versionCode=\"$currentAndroid\"/ android-versionCode=\"$androidVersion\"/g" config.xml'
      - 'currentManifestJsonVersion=`grep -oP "version\": \"\d+.\d+.\d+(-(alpha|beta|rc)[0-9]+)?\"" src/assets/manifest.json | grep -oP "\d+.\d+.\d+(-(alpha|beta|rc)[0-9]+)?"`'
      - 'sed -i "s/version\": \"$currentManifestJsonVersion\"/version\": \"${RELEASE_VERSION}\"/g" src/assets/manifest.json'
      - 'sed -i "s/echo \".*\" #lastest/echo \"${RELEASE_VERSION}\" #lastest/g" install.sh'
      # Copy cached dependencies and build
      - ls -artl /tmp/.build-cache
      - cp -R /tmp/.build-cache/node_modules .
      - export NODE_OPTIONS=--max-old-space-size=4096
      - npm run build.prod
      # Git process for release (ISO gitflow)
      - git add .
      - git commit -m "Prepare release ${RELEASE_VERSION}"
      - git checkout master
      - git merge --no-ff --no-edit -m "Release ${RELEASE_VERSION}" release/${RELEASE_VERSION}
      - git tag -a ${RELEASE_VERSION} -m "${RELEASE_VERSION}"
      - git checkout develop
      - git merge --no-ff --no-edit -m "[skip ci] Release ${RELEASE_VERSION}" release/${RELEASE_VERSION}
      - git push origin develop
      - git push origin master
      - git push --tags
      - git branch -D release/${RELEASE_VERSION}
  after_script:
    # Remember version
    - APP_VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "APP_VERSION=${APP_VERSION}" > variables.env
  artifacts:
    paths:
      - www
    reports:
      dotenv: variables.env
    expire_in: 24 hours
  allow_failure: false
  only:
    - develop
    - imagine/develop
  when: manual

release:
    extends: .release
    image: ${CI_BUILD_IMAGE}
    needs: [build]

failsafe-release:
    extends: .release
    needs: [failsafe-build]

gitlab-release:
    stage: release
    tags: [sih_public_runner]
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    script:
        - echo "running release for ${CI_COMMIT_TAG}"
    release:
        name: "Release ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}"
        description: "Created using the release-cli $EXTRA_DESCRIPTION"
        tag_name: "${CI_COMMIT_TAG}"
        ref: "${CI_COMMIT_TAG}"
    only:
        - tags

# ---------------------------------------------------------------
# Docker jobs
# ---------------------------------------------------------------

.docker-build:
  extends: .docker
  stage: docker
  script:
    # Build docker image
    - docker pull ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} || true
    - docker build --cache-from ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --pull -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} --build-arg="HTML=www" --build-arg="NGINX_CONF=scripts/docker/site.conf" -f scripts/docker/Dockerfile .
    - docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}

docker:develop:
  extends: .docker-build
  variables:
    IMAGE_TAG: develop
  needs: [build]
  only:
    - develop

docker:imagine:
  extends: .docker-build
  variables:
    IMAGE_TAG: imagine
  needs: [build]
  only:
    - imagine/develop

docker:feature:
  extends: .docker-build
  needs: [build]
  variables:
    IMAGE_TAG: feature
  only:
    - /^feature\/.*/
  when: manual

docker:release:
  extends: .docker-build
  variables:
    IMAGE_TAG: ${APP_VERSION}
  needs: [release]
  only:
    - develop
    - imagine/develop

# ---------------------------------------------------------------
# Docs jobs
# ---------------------------------------------------------------

pages:
  stage: docs
  tags: [sih_public_runner]
  image: python:3.7-alpine
  before_script:
    - apk --update --upgrade add gcc musl-dev jpeg-dev zlib-dev libffi-dev cairo-dev pango-dev gdk-pixbuf-dev
    - pip install --upgrade pip
    - pip install --upgrade mkdocs
    - pip install --upgrade mkdocs-pdf-export-plugin==0.5.5
  script:
    - mkdocs -v build
    - mv site public
  artifacts:
    paths:
      - public
  only:
    - develop
  when: manual

