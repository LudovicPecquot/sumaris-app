# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AccountVO {
  avatar: String
  creationDate: Date
  department: DepartmentVO
  email: String
  firstName: String
  hasAvatar: Boolean
  id: Int
  lastName: String
  mainProfile: String
  profiles: [String]
  pubkey: String
  settings: UserSettingsVO
  statusId: Int
  updateDate: Date
  username: String
  usernameExtranet: String
}

type AggregatedLandingVO {
  id: Int
  vesselActivities: [VesselActivityVO]
  vesselDateTime: Date
  vesselSnapshot: VesselSnapshotVO
}

type AggregationResultVO {
  aggStrata: [String]
  columns: [ExtractionTableColumnVO]
  rows: [[String]]
  spaceStrata: [String]
  timeStrata: [String]
  total: BigDecimal
  type: ExtractionTypeVO
}

type AggregationStrataVO {
  aggColumnName: String
  aggFunction: String
  comments: String
  creationDate: Date
  description: String
  id: Int
  isDefault: Boolean
  label: String
  name: String
  product: ExtractionProductVO
  productId: Int
  sheetName: String
  spatialColumnName: String
  statusId: Int
  techColumnName: String
  timeColumnName: String
  updateDate: Date
}

type AggregationTechResultVO {
  data: Map_String_ObjectScalar
}

type AggregationTypeVO {
  category: ExtractionCategoryEnum
  comments: String
  creationDate: Date
  description: String
  "Get extraction documentation URL"
  docUrl: String
  documentation: String
  filter: String
  id: Int
  isSpatial: Boolean
  label: String
  liveFormat: LiveFormatEnum
  name: String
  processingFrequencyId: Int
  public: Boolean!
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  sheetNames: [String]
  statusId: Int
  stratum: [AggregationStrataVO]
  updateDate: Date
  version: String
}

type AppliedPeriodVO {
  acquisitionNumber: Int
  appliedStrategyId: Int
  endDate: Date
  startDate: Date
}

type AppliedStrategyVO {
  appliedPeriods: [AppliedPeriodVO]
  id: Int
  location: ReferentialVO
  strategyId: Int
}

type AuthTokenVO {
  challenge: String
  pubkey: String
  signature: String
  username: String
}

type BatchVO {
  children: [BatchVO]
  comments: String
  controlDate: Date
  exhaustiveInventory: Boolean
  id: Int
  individualCount: Int
  label: String
  locationId: Int
  "Get measurement values (as a key/value map, using pmfmId as key)"
  measurementValues: Map_Integer_StringScalar
  operation: OperationVO
  operationId: Int
  parent: BatchVO
  parentId: Int
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  "Get batch quantification measurements"
  quantificationMeasurements: [QuantificationMeasurementVO]
  rankOrder: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  sale: SaleVO
  saleId: Int
  samplingRatio: Float
  samplingRatioText: String
  "Get batch sorting measurements"
  sortingMeasurements: [MeasurementVO]
  taxonGroup: ReferentialVO
  taxonName: TaxonNameVO
  updateDate: Date
  validationDate: Date
}

type ConfigurationVO {
  backgroundImages: [String]
  creationDate: Date
  id: Int
  label: String
  largeLogo: String
  name: String
  partners: [DepartmentVO]
  properties: Map_String_StringScalar
  smallLogo: String
  statusId: Int
  updateDate: Date
}

type DenormalizedPmfmStrategyVO {
  acquisitionLevel: String
  acquisitionNumber: Int
  completeName: String
  defaultValue: Float
  fractionId: Int
  gearIds: [Int]
  gears: [String]
  id: Int
  isMandatory: Boolean
  label: String
  matrixId: Int
  maxValue: Float
  maximumNumberDecimals: Int
  methodId: Int
  minValue: Float
  name: String
  parameterId: Int
  qualitativeValues: [ReferentialVO]
  rankOrder: Int
  referenceTaxonIds: [Int]
  signifFiguresNumber: Int
  strategyId: Int
  taxonGroupIds: [Int]
  type: String
  unitLabel: String
  updateDate: Date
}

type DepartmentVO {
  creationDate: Date
  hasLogo: Boolean
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  logo: String
  name: String
  siteUrl: String
  statusId: Int
  updateDate: Date
}

type ExtractionProductVO {
  category: ExtractionCategoryEnum
  comments: String
  creationDate: Date
  description: String
  documentation: String
  filter: String
  format: String
  id: Int
  isSpatial: Boolean
  items: Map_String_StringScalar
  label: String
  name: String
  parentId: Int
  processingFrequencyId: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  sheetNames: [String]
  statusId: Int
  stratum: [AggregationStrataVO]
  tableNames: [String]
  tables: [ExtractionTableVO]
  updateDate: Date
  version: String
}

type ExtractionResultVO {
  columns: [ExtractionTableColumnVO]
  rows: [[String]]
  total: BigDecimal
  type: ExtractionTypeVO
}

type ExtractionTableColumnVO {
  columnName: String
  description: String
  id: Int
  label: String
  name: String
  rankOrder: Int
  tableId: Int
  type: String
  values: [String]
}

type ExtractionTableVO {
  columnValues: Map_String_List_ObjectScalar
  columns: [ExtractionTableColumnVO]
  comments: String
  creationDate: Date
  defaultAggColumn: String
  defaultSpaceColumn: String
  defaultTechColumn: String
  description: String
  id: Int
  isSpatial: Boolean
  label: String
  name: String
  product: ExtractionProductVO
  productId: Int
  rankOrder: Int
  sheetName: String
  statusId: Int
  tableName: String
  updateDate: Date
}

type ExtractionTypeVO {
  category: ExtractionCategoryEnum
  comments: String
  description: String
  "Get extraction documentation URL"
  docUrl: String
  filter: String
  id: Int
  isSpatial: Boolean
  label: String
  liveFormat: LiveFormatEnum
  name: String
  processingFrequencyId: Int
  public: Boolean!
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  sheetNames: [String]
  statusId: Int
  version: String
}

type FishingAreaVO {
  depthGradient: ReferentialVO
  distanceToCoastGradient: ReferentialVO
  id: Int
  location: LocationVO
  nearbySpecificArea: ReferentialVO
  operation: OperationVO
  operationId: Int
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
}

type LandingVO {
  comments: String
  controlDate: Date
  creationDate: Date
  dateTime: Date
  id: Int
  location: LocationVO
  "Get measurement values (as a key/value map, using pmfmId as key)"
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVO]
  observedLocation: ObservedLocationVO
  observedLocationId: Int
  observers: [PersonVO]
  "Get landing's products"
  products: [ProductVO]
  program: ProgramVO
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  rankOrderOnVessel: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  "Get landing's samples"
  samples: [SampleVO]
  trip: TripVO
  tripId: Int
  updateDate: Date
  validationDate: Date
  vesselDateTime: Date
  vesselSnapshot: VesselSnapshotVO
}

type LocationAssociationVO {
  childId: Int
  childSurfaceRatio: Float
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  name: String
  parentId: Int
  rankOrder: Int
  statusId: Int
  updateDate: Date
  validityStatusId: Int
}

type LocationVO {
  children: [LocationAssociationVO]
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  name: String
  parents: [LocationAssociationVO]
  rankOrder: Int
  statusId: Int
  updateDate: Date
  validityStatusId: Int
}

type MeasurementVO {
  alphanumericalValue: String
  controlDate: Date
  creationDate: Date
  digitCount: Int
  entityName: String
  id: Int
  numericalValue: Float
  "Get measurement's pmfm"
  pmfm: PmfmVO
  pmfmId: Int!
  precisionValue: Float
  qualitativeValue: ReferentialVO
  qualityFlagId: Int
  rankOrder: Short
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  updateDate: Date
  validationDate: Date
}

type MetierVO {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  gear: ReferentialVO
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  name: String
  rankOrder: Int
  statusId: Int
  taxonGroup: TaxonGroupVO
  updateDate: Date
  validityStatusId: Int
}

type MinMaxVO {
  max: Float
  min: Float
}

"Mutation root"
type Mutation {
  "Confirm an account email"
  confirmAccountEmail(code: String, email: String): Boolean!
  "Control an observed location"
  controlObservedLocation(observedLocation: ObservedLocationVOInput): ObservedLocationVO
  "Control a trip"
  controlTrip(trip: TripVOInput!): TripVO
  "Create an account"
  createAccount(account: AccountVOInput): AccountVO
  "Delete some aggregations"
  deleteAggregations(ids: [Int]): Boolean!
  "Delete an observed location"
  deleteLanding(id: Int!): Boolean!
  "Delete many observed locations"
  deleteLandings(ids: [Int]): Boolean!
  "Delete an observed location"
  deleteObservedLocation(id: Int!): Boolean!
  "Delete many observed locations"
  deleteObservedLocations(ids: [Int]): Boolean!
  "Delete an operation"
  deleteOperation(id: Int!): Boolean!
  "Delete many operations"
  deleteOperations(ids: [Int]): Boolean!
  "Delete many person (by ids)"
  deletePersons(ids: [Int]): Boolean!
  "Delete a program"
  deleteProgram(id: Int!): Boolean!
  "Delete a referential (by id)"
  deleteReferential(entityName: String, id: Int!): Boolean!
  "Delete many referential (by ids)"
  deleteReferentials(entityName: String, ids: [Int]): Boolean!
  "Delete a strategy"
  deleteStrategy(id: Int!): Boolean!
  "Delete an entity from the trash"
  deleteTrashEntity(entityName: String, id: String): Boolean!
  "Delete a trip"
  deleteTrip(id: Int!): Boolean!
  "Delete many trips"
  deleteTrips(ids: [Int]!): Boolean!
  "Delete a user event"
  deleteUserEvent(id: Int!): Boolean!
  "Delete many user events"
  deleteUserEvents(ids: [Int]): Boolean!
  "Delete a vessel (by vessel features id)"
  deleteVessel(id: Int!): Boolean!
  "Delete many vessels (by vessel features ids)"
  deleteVessels(ids: [Int]!): Boolean!
  "Qualify an observed location"
  qualifyObservedLocation(observedLocation: ObservedLocationVOInput): ObservedLocationVO
  "Qualify a trip"
  qualifyTrip(trip: TripVOInput!): TripVO
  "Create or update an account"
  saveAccount(account: AccountVOInput): AccountVO
  "Save aggregated landings"
  saveAggregatedLandings(aggregatedLandings: [AggregatedLandingVOInput], filter: AggregatedLandingFilterVOInput): [AggregatedLandingVO]
  "Create or update a data aggregation"
  saveAggregation(filter: ExtractionFilterVOInput, type: AggregationTypeVOInput): AggregationTypeVO
  "Save pod configuration"
  saveConfiguration(config: ConfigurationVOInput): ConfigurationVO
  "Create or update a department"
  saveDepartment(department: DepartmentVOInput): DepartmentVO
  "Create or update a extraction"
  saveExtraction(filter: ExtractionFilterVOInput, type: ExtractionTypeVOInput): ExtractionTypeVO
  "Create or update an landing"
  saveLanding(landing: LandingVOInput): LandingVO
  "Create or update many landings"
  saveLandings(landings: [LandingVOInput]!): [LandingVO]
  "Create or update an observed location"
  saveObservedLocation(observedLocation: ObservedLocationVOInput, options: ObservedLocationSaveOptionsInput): ObservedLocationVO
  "Create or update many observed locations"
  saveObservedLocations(observedLocations: [ObservedLocationVOInput], options: ObservedLocationSaveOptionsInput): [ObservedLocationVO]
  "Create or update an operation"
  saveOperation(operation: OperationVOInput): OperationVO
  "Create or update many operations"
  saveOperations(operations: [OperationVOInput]!): [OperationVO]
  "Create or update a parameter"
  saveParameter(parameter: ParameterVOInput): ParameterVO
  "Create or update many persons"
  savePersons(persons: [PersonVOInput]): [PersonVO]
  "Create or update a pmfm"
  savePmfm(pmfm: PmfmVOInput): PmfmVO
  "Save a program (with strategies)"
  saveProgram(options: ProgramSaveOptionsInput, program: ProgramVOInput!): ProgramVO
  "Create or update a referential"
  saveReferential(referential: ReferentialVOInput): ReferentialVO
  "Create or update many referential"
  saveReferentials(referentials: [ReferentialVOInput]): [ReferentialVO]
  "Save a software configuration"
  saveSoftware(software: SoftwareVOInput): SoftwareVO
  "Save a strategy"
  saveStrategy(strategy: StrategyVOInput!): StrategyVO
  "Create or update a trip"
  saveTrip(options: TripSaveOptionsInput, saveOptions: TripSaveOptionsInput, trip: TripVOInput!, withOperation: Boolean = false): TripVO
  "Create or update many trips"
  saveTrips(options: TripSaveOptionsInput, saveOptions: TripSaveOptionsInput, trips: [TripVOInput]!, withOperation: Boolean = false): [TripVO]
  "Sent data to admin, for debug"
  saveUserEvent(userEvent: UserEventVOInput): UserEventVO
  "Create or update a vessel"
  saveVessel(vessel: VesselVOInput!): VesselVO
  "Create or update many vessels"
  saveVessels(vessels: [VesselVOInput]!): [VesselVO]
  "Resent confirmation email"
  sendAccountConfirmationEmail(email: String, locale: String = "en_GB"): Boolean!
  "Unvalidate an observed location"
  unvalidateObservedLocation(observedLocation: ObservedLocationVOInput): ObservedLocationVO
  "Unvalidate a trip"
  unvalidateTrip(trip: TripVOInput!): TripVO
  "Validate an observed location"
  validateObservedLocation(observedLocation: ObservedLocationVOInput): ObservedLocationVO
  "Validate a trip"
  validateTrip(trip: TripVOInput!): TripVO
}

type ObservedLocationVO {
  comments: String
  controlDate: Date
  creationDate: Date
  endDateTime: Date
  id: Int
  landings: [LandingVO]
  location: LocationVO
  "Get measurement values (as a key/value map, using pmfmId as key)"
  measurementValues: Map_Integer_StringScalar
  "Get measurement values"
  measurements: [MeasurementVO]
  observers: [PersonVO]
  program: ProgramVO
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  startDateTime: Date
  updateDate: Date
  validationDate: Date
}

type OperationGroupVO {
  comments: String
  controlDate: Date
  "Get operation group's fishing areas"
  fishingAreas: [FishingAreaVO]
  "Get operation group's gear measurements"
  gearMeasurementValues: Map_Integer_StringScalar
  "Get operation group's gear measurements"
  gearMeasurements: [MeasurementVO]
  hasCatch: Boolean
  id: Int
  "Get operation group's measurements"
  measurementValues: Map_Integer_StringScalar
  "Get operation group's measurements"
  measurements: [MeasurementVO]
  metier: MetierVO
  "Get operation group's packets"
  packets: [PacketVO]
  physicalGear: PhysicalGearVO
  physicalGearId: Int
  "Get operation group's products"
  products: [ProductVO]
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrderOnPeriod: Int
  recorderDepartment: DepartmentVO
  "Get operation group's samples"
  samples: [SampleVO]
  trip: TripVO
  tripId: Int
  updateDate: Date
  validationDate: Date
}

type OperationVO {
  "Get operation's batches"
  batches: [BatchVO]
  catchBatch: BatchVO
  comments: String
  controlDate: Date
  endDateTime: Date
  "Get operation's fishing areas"
  fishingAreas: [FishingAreaVO]
  fishingEndDateTime: Date
  fishingStartDateTime: Date
  "Get operation's gear measurements"
  gearMeasurementValues: Map_Integer_StringScalar
  "Get operation's gear measurements"
  gearMeasurements: [MeasurementVO]
  hasCatch: Boolean
  id: Int
  "Get operation's measurements"
  measurementValues: Map_Integer_StringScalar
  "Get operation's measurements"
  measurements: [MeasurementVO]
  "Get operation's metier"
  metier: MetierVO
  physicalGear: PhysicalGearVO
  physicalGearId: Int
  "Get operation's position"
  positions: [VesselPositionVO]
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrderOnPeriod: Int
  recorderDepartment: DepartmentVO
  "Get operation's samples"
  samples: [SampleVO]
  startDateTime: Date
  trip: TripVO
  tripId: Int
  updateDate: Date
  validationDate: Date
}

type PacketCompositionVO {
  id: Int
  rankOrder: Int
  ratios: [Int]
  taxonGroup: ReferentialVO
}

type PacketVO {
  comments: String
  composition: [PacketCompositionVO]
  controlDate: Date
  id: Int
  number: Int
  operation: OperationVO
  operationId: Int
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  sampledWeights: [Float]
  updateDate: Date
  validationDate: Date
  weight: Float
}

type ParameterVO {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  name: String
  qualitativeValues: [ReferentialVO]
  rankOrder: Int
  statusId: Int
  type: String
  updateDate: Date
  validityStatusId: Int
}

type PersonVO {
  avatar: String
  creationDate: Date
  department: DepartmentVO
  email: String
  firstName: String
  hasAvatar: Boolean
  id: Int
  lastName: String
  mainProfile: String
  profiles: [String]
  pubkey: String
  statusId: Int
  updateDate: Date
  username: String
  usernameExtranet: String
}

type PhysicalGearVO {
  comments: String
  controlDate: Date
  creationDate: Date
  gear: ReferentialVO
  id: Int
  "Get physical gear measurements"
  measurementValues: Map_Integer_StringScalar
  "Get physical gear measurements"
  measurements: [MeasurementVO]
  program: ProgramVO
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  "Get physical gear's trip"
  trip: TripVO
  tripId: Int
  updateDate: Date
  validationDate: Date
}

type PmfmStrategyVO {
  acquisitionLevel: String
  acquisitionNumber: Int
  defaultValue: Float
  "Get strategy fraction"
  fraction: ReferentialVO
  fractionId: Int
  gearIds: [Int]
  gears: [String]
  id: Int
  isMandatory: Boolean
  "Get strategy matrix"
  matrix: ReferentialVO
  matrixId: Int
  maxValue: Float
  "Get strategy method"
  method: ReferentialVO
  methodId: Int
  minValue: Float
  "Get strategy parameter"
  parameter: ReferentialVO
  parameterId: Int
  "Get strategy pmfm"
  pmfm: PmfmVO
  pmfmId: Int
  rankOrder: Int
  referenceTaxonIds: [Int]
  strategyId: Int
  taxonGroupIds: [Int]
  updateDate: Date
}

type PmfmVO {
  comments: String
  "Get PMFM's complete name"
  completeName: String
  creationDate: Date
  defaultValue: Float
  description: String
  entityName: String
  "Get PMFM's fraction"
  fraction: ReferentialVO
  fractionId: Int
  id: Int
  isCalculated: Boolean
  isEstimated: Boolean
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  "Get PMFM's matrix"
  matrix: ReferentialVO
  matrixId: Int
  maxValue: Float
  maximumNumberDecimals: Int
  "Get PMFM's method"
  method: ReferentialVO
  methodId: Int
  minValue: Float
  name: String
  "Get PMFM's parameter"
  parameter: ParameterVO
  parameterId: Int
  qualitativeValues: [ReferentialVO]
  rankOrder: Int
  signifFiguresNumber: Int
  statusId: Int
  type: String
  "Get PMFM's unit"
  unit: ReferentialVO
  unitId: Int
  unitLabel: String
  updateDate: Date
  validityStatusId: Int
}

type ProductVO {
  batch: BatchVO
  batchId: Int
  comments: String
  controlDate: Date
  cost: Float
  creationDate: Date
  dressingId: Int
  id: Int
  individualCount: Int
  label: String
  landing: LandingVO
  landingId: Int
  "Get measurement values (as a key/value map, using pmfmId as key)"
  measurementValues: Map_Integer_StringScalar
  operation: OperationVO
  operationId: Int
  preservationId: Int
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  sale: SaleVO
  saleId: Int
  saleType: ReferentialVO
  sizeCategoryId: Int
  subgroupCount: Float
  taxonGroup: ReferentialVO
  updateDate: Date
  validationDate: Date
  weight: Float
  weightCalculated: Boolean!
}

type ProgramVO {
  comments: String
  creationDate: Date
  description: String
  "Get program's gear classification"
  gearClassification: ReferentialVO
  gearClassificationId: Int
  id: Int
  label: String
  locationClassificationIds: [Int]
  "Get program's location classifications"
  locationClassifications: [ReferentialVO]
  locationIds: [Int]
  locations: [ReferentialVO]
  name: String
  properties: Map_String_StringScalar
  statusId: Int
  "Get program's strategies"
  strategies: [StrategyVO]
  "Get program's taxon group type"
  taxonGroupType: ReferentialVO
  taxonGroupTypeId: Int
  updateDate: Date
}

type QuantificationMeasurementVO {
  alphanumericalValue: String
  controlDate: Date
  creationDate: Date
  digitCount: Int
  entityName: String
  id: Int
  isReferenceQuantification: Boolean
  numericalValue: Float
  "Get measurement's pmfm"
  pmfm: PmfmVO
  pmfmId: Int!
  precisionValue: Float
  qualitativeValue: ReferentialVO
  qualityFlagId: Int
  rankOrder: Short
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  subgroupNumber: Short
  updateDate: Date
  validationDate: Date
}

"Query root"
type Query {
  "Load a user account"
  account(pubkey: String): AccountVO
  "Find aggregated landings by filter"
  aggregatedLandings(filter: AggregatedLandingFilterVOInput): [AggregatedLandingVO]
  "Read columns from aggregation"
  aggregationColumns(sheet: String, type: AggregationTypeVOInput): [ExtractionTableColumnVO]
  "Execute an aggregation and return as GeoJson"
  aggregationGeoJson(filter: ExtractionFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String, sortDirection: String = "asc", strata: AggregationStrataVOInput, type: AggregationTypeVOInput): ObjectScalar
  "Read an aggregation"
  aggregationRows(filter: ExtractionFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String, sortDirection: String = "asc", strata: AggregationStrataVOInput, type: AggregationTypeVOInput): AggregationResultVO
  "Execute an aggregation and return as GeoJson"
  aggregationTech(filter: ExtractionFilterVOInput, sortBy: String, sortDirection: String = "asc", strata: AggregationStrataVOInput, type: AggregationTypeVOInput): AggregationTechResultVO
  "Execute an aggregation and return as GeoJson"
  aggregationTechMinMax(filter: ExtractionFilterVOInput, strata: AggregationStrataVOInput, type: AggregationTypeVOInput): MinMaxVO
  "Get one aggregation type"
  aggregationType(id: Int!): AggregationTypeVO
  "Get all available aggregation types"
  aggregationTypes(filter: AggregationTypeFilterVOInput): [AggregationTypeVO]
  "Search in analytic references"
  analyticReferences(filter: ReferentialFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "label", sortDirection: String = "asc"): [ReferentialVO]
  "Get analytic references count"
  analyticReferencesCount(filter: ReferentialFilterVOInput): Long
  "Ask for a new auth challenge"
  authChallenge: AuthTokenVO
  "Authenticate using a token"
  authenticate(token: String): Boolean!
  "Get cache statistics"
  cacheStatistics: Map_String_Map_String_LongScalar
  "Clear a single cache or all caches"
  clearCache(name: String): Boolean!
  "Load pod configuration"
  configuration(id: Int, label: String): ConfigurationVO
  "Get a department"
  department(id: Int!): DepartmentVO
  "Search in departments"
  departments(filter: DepartmentFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "name", sortDirection: String = "asc"): [DepartmentVO]
  "Preview some extraction"
  extraction(filter: ExtractionFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String, sortDirection: String = "asc", type: ExtractionTypeVOInput): [Map_String_StringScalar]
  "Execute extraction to a file"
  extractionFile(filter: ExtractionFilterVOInput, type: ExtractionTypeVOInput): String
  "Preview some extraction rows"
  extractionRows(filter: ExtractionFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String, sortDirection: String = "asc", type: ExtractionTypeVOInput): ExtractionResultVO
  "Get all available extraction types"
  extractionTypes(filter: ExtractionTypeFilterVOInput): [ExtractionTypeVO] @deprecated(reason : "Use liveExtractionTypes and aggregationTypes")
  "Check if email exists (from a md5 hash)"
  isEmailExists(email: String, hash: String): Boolean!
  "Get an observed location, by id"
  landing(id: Int!): LandingVO
  "Search in landings"
  landings(filter: LandingFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "dateTime", sortDirection: String = "asc"): [LandingVO]
  "Get total number of landings"
  landingsCount(filter: LandingFilterVOInput): Long!
  "Get last update date of all referential"
  lastUpdateDate: Date
  "Get all live extraction types"
  liveExtractionTypes(filter: ExtractionTypeFilterVOInput): [ExtractionTypeVO]
  "Get a metier by id"
  metier(id: Int!): MetierVO
  "Search in metiers"
  metiers(filter: MetierFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "name", sortDirection: String = "asc"): [MetierVO]
  "Count metiers"
  metiersCount(filter: MetierFilterVOInput): Long
  "Get an observed location, by id"
  observedLocation(id: Int!): ObservedLocationVO
  "Search in observed locations"
  observedLocations(filter: ObservedLocationFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "startDateTime", sortDirection: String = "asc", trash: Boolean = false): [ObservedLocationVO]
  "Get total number of observed locations"
  observedLocationsCount(filter: ObservedLocationFilterVOInput, trash: Boolean = false): Long!
  "Get an operation"
  operation(id: Int!): OperationVO
  "Get trip's operation groups"
  operationGroups(filter: OperationFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "rankOrderOnPeriod", sortDirection: String = "asc"): [OperationGroupVO]
  "Get trip's operations"
  operations(filter: OperationFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "startDateTime", sortDirection: String = "asc"): [OperationVO]
  "Get operations count"
  operationsCount(filter: OperationFilterVOInput): Long!
  "Get a parameter"
  parameter(id: Int, label: String): ParameterVO
  "Search in persons"
  persons(filter: PersonFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "pubkey", sortDirection: String = "asc"): [PersonVO]
  "Get total persons count"
  personsCount(filter: PersonFilterVOInput): Long!
  "Get physical gears"
  physicalGears(filter: PhysicalGearFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "rankOrder", sortDirection: String = "asc"): [PhysicalGearVO]
  "Get a PMFM"
  pmfm(id: Int, label: String): PmfmVO
  "Search in PMFM"
  pmfms(filter: ReferentialFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "label", sortDirection: String = "asc"): [PmfmVO]
  "Get a program"
  program(id: Int, label: String): ProgramVO
  "Search in programs"
  programs(filter: ProgramFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "label", sortDirection: String = "asc"): [ProgramVO]
  "Get programs count"
  programsCount(filter: ProgramFilterVOInput): Long
  "Get all levels from entityName"
  referentialLevels(entityName: String): [ReferentialVO]
  "Get all types of referential"
  referentialTypes: [ReferentialTypeVO]
  "Search in referentials"
  referentials(entityName: String, filter: ReferentialFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "label", sortDirection: String = "asc"): [ReferentialVO]
  "Get referentials count"
  referentialsCount(entityName: String, filter: ReferentialFilterVOInput): Long
  "A software config"
  software(id: Int, label: String): SoftwareVO
  "Search in strategies"
  strategies(filter: StrategyFilterVOInput!, offset: Int = 0, size: Int = 1000, sortBy: String = "label", sortDirection: String = "asc"): [StrategyVO]
  "Get strategies count"
  strategiesCount(filter: StrategyFilterVOInput): Long
  "Get a strategy"
  strategy(id: Int!): StrategyVO
  "Get next label for strategy"
  strategyNextLabel(labelPrefix: String = "", nbDigit: Int = 0, programId: Int!): String
  "Get next sample label for strategy"
  strategyNextSampleLabel(strategyLabel: String!, labelSeparator: String = "", nbDigit: Int = 0): String
  "Search in taxon names"
  taxonNames(filter: TaxonNameFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "name", sortDirection: String = "asc"): [TaxonNameVO]
  "Get trash content"
  trashEntities(entityName: String, offset: Int = 0, size: Int = 1000, sortBy: String = "updateDate", sortDirection: String = "desc"): [String]
  "Get trash file content"
  trashEntity(entityName: String, id: String): String
  "Get a trip, by id"
  trip(id: Int!): TripVO
  "Search in trips"
  trips(filter: TripFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String, sortDirection: String = "desc", trash: Boolean = false): [TripVO]
  "Get trips count"
  tripsCount(filter: TripFilterVOInput, trash: Boolean = false): Long!
  "Search in user events"
  userEvents(filter: UserEventFilterVOInput, page: PageInput): [UserEventVO]
  "Get a vessel"
  vessel(vesselId: Int!): VesselVO
  "Get vessel features history"
  vesselFeaturesHistory(filter: VesselFeaturesFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "startDate", sortDirection: String = "asc", vesselId: Int): [VesselFeaturesVO]
  "Get vessel registration history"
  vesselRegistrationHistory(filter: VesselRegistrationFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "startDate", sortDirection: String = "asc", vesselId: Int): [VesselRegistrationVO]
  "Search in vessel snapshots"
  vesselSnapshots(filter: VesselFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "exteriorMarking", sortDirection: String = "asc"): [VesselSnapshotVO]
  "Search in vessels"
  vessels(filter: VesselFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String, sortDirection: String = "asc"): [VesselVO]
  "Get total vessels count"
  vesselsCount(filter: VesselFilterVOInput): Long!
}

type ReferentialTypeVO {
  id: String
  level: String
}

type ReferentialVO {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  name: String
  rankOrder: Int
  statusId: Int
  updateDate: Date
  validityStatusId: Int
}

type SaleVO {
  comments: String
  controlDate: Date
  creationDate: Date
  endDateTime: Date
  id: Int
  "Get sale measurement values"
  measurementValues: Map_Integer_StringScalar
  "Get sale measurements"
  measurements: [MeasurementVO]
  observers: [PersonVO]
  "Get sale's products"
  products: [ProductVO]
  program: ProgramVO
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  saleLocation: LocationVO
  saleType: ReferentialVO
  samples: [SampleVO]
  startDateTime: Date
  trip: TripVO
  tripId: Int
  updateDate: Date
  validationDate: Date
  vesselDateTime: Date
  vesselSnapshot: VesselSnapshotVO
}

type SampleVO {
  batch: BatchVO
  batchId: Int
  children: [SampleVO]
  comments: String
  controlDate: Date
  creationDate: Date
  id: Int
  individualCount: Int
  label: String
  landing: LandingVO
  landingId: Int
  matrix: ReferentialVO
  matrixId: Int
  "Get measurement values (as a key/value map, using pmfmId as key)"
  measurementValues: Map_Integer_StringScalar
  "Get sample measurements"
  measurements: [MeasurementVO]
  operation: OperationVO
  operationId: Int
  parent: SampleVO
  parentId: Int
  program: ProgramVO
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  sampleDate: Date
  size: Float
  sizeUnit: String
  taxonGroup: ReferentialVO
  taxonName: TaxonNameVO
  updateDate: Date
  validationDate: Date
}

type SoftwareVO {
  creationDate: Date
  id: Int
  label: String
  name: String
  properties: Map_String_StringScalar
  statusId: Int
  updateDate: Date
}

type StrategyDepartmentVO {
  department: ReferentialVO
  id: Int
  location: ReferentialVO
  privilege: ReferentialVO
  strategyId: Int
  updateDate: Date
}

type StrategyVO {
  analyticReference: String
  appliedStrategies: [AppliedStrategyVO]
  comments: String
  creationDate: Date
  "Get strategy's denormalized pmfms"
  denormalizedPmfms: [DenormalizedPmfmStrategyVO]
  departments: [StrategyDepartmentVO]
  description: String
  gearIds: [Int]
  gears: [ReferentialVO]
  id: Int
  label: String
  name: String
  "Get strategy's pmfms"
  pmfms: [PmfmStrategyVO]
  programId: Int
  statusId: Int
  taxonGroupIds: [Int]
  taxonGroups: [TaxonGroupStrategyVO]
  taxonNameIds: [Int]
  taxonNames: [TaxonNameStrategyVO]
  updateDate: Date
}

"Subscription root"
type Subscription {
  "Subscribe to an account update"
  updateAccount(
    "Minimum interval to find changes, in seconds."
    interval: Int = 30
  ): AccountVO
  "Subscribe to changes on an landing"
  updateLanding(
    id: Int!,
    "Minimum interval to find changes, in seconds."
    interval: Int = 30
  ): LandingVO
  "Subscribe to changes on an observed location"
  updateObservedLocation(
    id: Int!,
    "Minimum interval to find changes, in seconds."
    interval: Int = 30
  ): ObservedLocationVO
  "Subscribe to changes on an operation"
  updateOperation(
    id: Int!,
    "Minimum interval to find changes, in seconds."
    interval: Int = 30
  ): OperationVO
  "Subscribe to changes on a program"
  updateProgram(
    id: Int,
    "Minimum interval to find changes, in seconds."
    interval: Int = 30,
    label: String
  ): ProgramVO
  "Subscribe to changes on program's strategies"
  updateProgramStrategies(
    "Minimum interval to find changes, in seconds."
    interval: Int = 30,
    programId: Int!
  ): [StrategyVO]
  "Subscribe to changes on a referential"
  updateReferential(
    entityName: String!,
    id: Int!,
    "Minimum interval to find changes, in seconds."
    interval: Int = 30
  ): ReferentialVO
  "Subscribe to changes on a trip"
  updateTrip(
    id: Int!,
    "Minimum interval to find changes, in seconds."
    interval: Int = 30
  ): TripVO
}

type TaxonGroupStrategyVO {
  priorityLevel: Int
  strategyId: Int
  taxonGroup: TaxonGroupVO
}

type TaxonGroupVO {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  name: String
  rankOrder: Int
  statusId: Int
  "Get taxon group's taxons"
  taxonNames: [TaxonNameVO]
  updateDate: Date
  validityStatusId: Int
}

type TaxonNameStrategyVO {
  isReferent: Boolean
  priorityLevel: Int
  referenceTaxonId: Int
  strategyId: Int
  taxonName: TaxonNameVO
}

type TaxonNameVO {
  comments: String
  completeName: String
  creationDate: Date
  description: String
  endDate: Date
  entityName: String
  id: Int
  isNaming: Boolean
  isReferent: Boolean
  isVirtual: Boolean
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  name: String
  rankOrder: Int
  referenceTaxonId: Int
  startDate: Date
  statusId: Int
  "Get taxon groups from a taxon name"
  taxonGroupIds: [Int]
  taxonomicLevelId: Int
  updateDate: Date
  upperRank: Int
  validityStatusId: Int
}

type TripVO {
  TYPENAME: String
  comments: String
  controlDate: Date
  creationDate: Date
  departureDateTime: Date
  departureLocation: LocationVO
  "Get trip's fishing area"
  fishingArea: FishingAreaVO
  "Get operation's gears"
  gears: [PhysicalGearVO]
  id: Int
  landing: LandingVO
  landingId: Int
  "Get trip's measurements"
  measurementValues: Map_Integer_StringScalar
  "Get trip's measurements"
  measurements: [MeasurementVO]
  "Get trip metiers"
  metiers: [MetierVO]
  observedLocation: ObservedLocationVO
  observedLocationId: Int
  observers: [PersonVO]
  "Get trip's operation groups"
  operationGroups: [OperationGroupVO]
  "Get trip's operations"
  operations: [OperationVO]
  program: ProgramVO
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  returnDateTime: Date
  returnLocation: LocationVO
  "Get trip's unique sale"
  sale: SaleVO
  "Get trip's sales"
  sales: [SaleVO]
  updateDate: Date
  validationDate: Date
  vesselDateTime: Date
  vesselSnapshot: VesselSnapshotVO
}

type UserEventVO {
  content: String
  creationDate: Date
  eventType: String
  hash: String
  id: Int
  issuer: String
  readSignature: String
  recipient: String
  signature: String
  updateDate: Date
}

type UserSettingsVO {
  content: String
  id: Int
  issuer: String
  latLongFormat: String
  locale: String
  nonce: String
  updateDate: Date
}

type VesselActivityVO {
  comments: String
  date: Date
  landingId: Int
  measurementValues: Map_Integer_StringScalar
  metiers: [ReferentialVO]
  observedLocationId: Int
  rankOrder: Int
  tripId: Int
}

type VesselFeaturesVO {
  administrativePower: Int
  basePortLocation: LocationVO
  comments: String
  controlDate: Date
  creationDate: Date
  endDate: Date
  exteriorMarking: String
  grossTonnageGrt: Float
  grossTonnageGt: Float
  id: Int
  lengthOverAll: Float
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVO]
  name: String
  program: ProgramVO
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  startDate: Date
  updateDate: Date
  validationDate: Date
}

type VesselPositionVO {
  controlDate: Date
  dateTime: Date
  id: Int
  latitude: Float
  longitude: Float
  operation: OperationVO
  operationId: Int
  qualityFlagId: Int
  recorderDepartment: DepartmentVO
  updateDate: Date
  validationDate: Date
}

type VesselRegistrationVO {
  endDate: Date
  id: Int
  intRegistrationCode: String
  qualityFlagId: Int
  registrationCode: String
  registrationLocation: LocationVO
  startDate: Date
}

type VesselSnapshotVO {
  administrativePower: Int
  basePortLocation: LocationVO
  comments: String
  controlDate: Date
  creationDate: Date
  endDate: Date
  exteriorMarking: String
  grossTonnageGrt: Float
  grossTonnageGt: Float
  id: Int
  lengthOverAll: Float
  "Get vessel's physical measurements"
  measurementValues: Map_Integer_StringScalar
  "Get vessel's physical measurements"
  measurements: [MeasurementVO]
  name: String
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  registrationCode: String
  registrationLocation: LocationVO
  startDate: Date
  updateDate: Date
  validationDate: Date
  vesselStatusId: Int
  vesselType: ReferentialVO
}

type VesselVO {
  comments: String
  controlDate: Date
  creationDate: Date
  features: VesselFeaturesVO
  id: Int
  program: ProgramVO
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVO
  recorderPerson: PersonVO
  registration: VesselRegistrationVO
  statusId: Int
  updateDate: Date
  validationDate: Date
  vesselType: ReferentialVO
}

enum ExtractionCategoryEnum {
  LIVE
  PRODUCT
}

enum LiveFormatEnum {
  COST
  FREE1
  FREE2
  PMFM_TRIP
  RDB
  RJB_TRIP
  STRAT
  SURVIVAL_TEST
}

enum SortDirection {
  ASC
  DESC
}

input AccountVOInput {
  avatar: String
  creationDate: Date
  department: DepartmentVOInput
  email: String
  firstName: String
  hasAvatar: Boolean
  id: Int
  lastName: String
  mainProfile: String
  profiles: [String]
  pubkey: String
  settings: UserSettingsVOInput
  statusId: Int
  updateDate: Date
  username: String
  usernameExtranet: String
}

input AggregatedLandingFilterVOInput {
  endDate: Date
  locationId: Int
  observedLocationId: Int
  programLabel: String
  recorderDepartmentId: Int
  recorderPersonId: Int
  startDate: Date
}

input AggregatedLandingVOInput {
  id: Int
  vesselActivities: [VesselActivityVOInput]
  vesselSnapshot: VesselSnapshotVOInput
}

input AggregationStrataVOInput {
  aggColumnName: String
  aggFunction: String
  comments: String
  creationDate: Date
  description: String
  id: Int
  isDefault: Boolean
  label: String
  name: String
  product: ExtractionProductVOInput
  productId: Int
  sheetName: String
  spatialColumnName: String
  statusId: Int
  techColumnName: String
  timeColumnName: String
  updateDate: Date
}

input AggregationTypeFilterVOInput {
  isSpatial: Boolean
  statusIds: [Int]
}

input AggregationTypeVOInput {
  category: ExtractionCategoryEnum
  comments: String
  creationDate: Date
  description: String
  docUrl: String
  documentation: String
  filter: String
  id: Int
  isSpatial: Boolean
  label: String
  name: String
  processingFrequencyId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  sheetNames: [String]
  statusId: Int
  stratum: [AggregationStrataVOInput]
  updateDate: Date
  version: String
}

input AppliedPeriodVOInput {
  acquisitionNumber: Int
  appliedStrategyId: Int
  endDate: Date
  startDate: Date
}

input AppliedStrategyVOInput {
  appliedPeriods: [AppliedPeriodVOInput]
  id: Int
  location: ReferentialVOInput
  strategyId: Int
}

input BatchVOInput {
  children: [BatchVOInput]
  comments: String
  controlDate: Date
  exhaustiveInventory: Boolean
  id: Int
  individualCount: Int
  label: String
  locationId: Int
  measurementValues: Map_Integer_StringScalar
  operation: OperationVOInput
  operationId: Int
  parent: BatchVOInput
  parentId: Int
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  quantificationMeasurements: [QuantificationMeasurementVOInput]
  rankOrder: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  sale: SaleVOInput
  saleId: Int
  samplingRatio: Float
  samplingRatioText: String
  sortingMeasurements: [MeasurementVOInput]
  taxonGroup: ReferentialVOInput
  taxonName: TaxonNameVOInput
  updateDate: Date
  validationDate: Date
}

input ConfigurationVOInput {
  backgroundImages: [String]
  creationDate: Date
  id: Int
  label: String
  largeLogo: String
  name: String
  partners: [DepartmentVOInput]
  properties: Map_String_StringScalar
  smallLogo: String
  statusId: Int
  updateDate: Date
}

input DenormalizedPmfmStrategyVOInput {
  acquisitionLevel: String
  acquisitionNumber: Int
  completeName: String
  defaultValue: Float
  fractionId: Int
  gearIds: [Int]
  gears: [String]
  id: Int
  isMandatory: Boolean
  label: String
  matrixId: Int
  maxValue: Float
  maximumNumberDecimals: Int
  methodId: Int
  minValue: Float
  name: String
  parameterId: Int
  qualitativeValues: [ReferentialVOInput]
  rankOrder: Int
  referenceTaxonIds: [Int]
  signifFiguresNumber: Int
  strategyId: Int
  taxonGroupIds: [Int]
  type: String
  unitLabel: String
  updateDate: Date
}

input DepartmentFilterVOInput {
  excludedIds: [Int]
  id: Int
  includedIds: [Int]
  label: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
  withLogo: Boolean
}

input DepartmentVOInput {
  creationDate: Date
  hasLogo: Boolean
  id: Int
  label: String
  logo: String
  name: String
  siteUrl: String
  statusId: Int
  updateDate: Date
}

input ExtractionFilterCriterionVOInput {
  name: String
  operator: String
  sheetName: String
  value: String
  values: [String]
}

input ExtractionFilterVOInput {
  criteria: [ExtractionFilterCriterionVOInput]
  distinct: Boolean
  excludeColumnNames: [String]
  includeColumnNames: [String]
  operator: String
  preview: Boolean
  sheetName: String
}

input ExtractionProductVOInput {
  comments: String
  creationDate: Date
  description: String
  documentation: String
  filter: String
  format: String
  id: Int
  isSpatial: Boolean
  label: String
  name: String
  parentId: Int
  processingFrequencyId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  statusId: Int
  stratum: [AggregationStrataVOInput]
  tables: [ExtractionTableVOInput]
  updateDate: Date
  version: String
}

input ExtractionTableColumnVOInput {
  columnName: String
  description: String
  id: Int
  label: String
  name: String
  rankOrder: Int
  tableId: Int
  type: String
  values: [String]
}

input ExtractionTableVOInput {
  columnValues: Map_String_List_ObjectScalar
  columns: [ExtractionTableColumnVOInput]
  comments: String
  creationDate: Date
  defaultAggColumn: String
  defaultSpaceColumn: String
  defaultTechColumn: String
  description: String
  id: Int
  isSpatial: Boolean
  label: String
  name: String
  product: ExtractionProductVOInput
  productId: Int
  rankOrder: Int
  statusId: Int
  tableName: String
  updateDate: Date
}

input ExtractionTypeFilterVOInput {
  category: String
  recorderPersonId: Int
}

input ExtractionTypeVOInput {
  category: ExtractionCategoryEnum
  comments: String
  description: String
  docUrl: String
  filter: String
  id: Int
  isSpatial: Boolean
  label: String
  name: String
  processingFrequencyId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  sheetNames: [String]
  statusId: Int
  version: String
}

input FishingAreaVOInput {
  depthGradient: ReferentialVOInput
  distanceToCoastGradient: ReferentialVOInput
  id: Int
  location: LocationVOInput
  nearbySpecificArea: ReferentialVOInput
  operation: OperationVOInput
  operationId: Int
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
}

input LandingFilterVOInput {
  endDate: Date
  excludeVesselIds: [Int]
  locationId: Int
  locationIds: [Int]
  observedLocationId: Int
  programLabel: String
  recorderDepartmentId: Int
  recorderPersonId: Int
  startDate: Date
  tripId: Int
  vesselId: Int
}

input LandingVOInput {
  comments: String
  controlDate: Date
  creationDate: Date
  dateTime: Date
  id: Int
  location: LocationVOInput
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  observedLocation: ObservedLocationVOInput
  observedLocationId: Int
  observers: [PersonVOInput]
  program: ProgramVOInput
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  rankOrderOnVessel: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  samples: [SampleVOInput]
  trip: TripVOInput
  tripId: Int
  updateDate: Date
  validationDate: Date
  vesselSnapshot: VesselSnapshotVOInput
}

input LocationAssociationVOInput {
  childId: Int
  childSurfaceRatio: Float
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  levelId: Int
  name: String
  parentId: Int
  rankOrder: Int
  statusId: Int
  updateDate: Date
  validityStatusId: Int
}

input LocationVOInput {
  children: [LocationAssociationVOInput]
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  levelId: Int
  name: String
  parents: [LocationAssociationVOInput]
  rankOrder: Int
  statusId: Int
  updateDate: Date
  validityStatusId: Int
}

input MeasurementVOInput {
  alphanumericalValue: String
  controlDate: Date
  creationDate: Date
  digitCount: Int
  entityName: String
  id: Int
  numericalValue: Float
  pmfmId: Int!
  precisionValue: Float
  qualitativeValue: ReferentialVOInput
  qualityFlagId: Int
  rankOrder: Short
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  updateDate: Date
  validationDate: Date
}

input MetierFilterVOInput {
  date: Date
  excludedIds: [Int]
  id: Int
  includedIds: [Int]
  label: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  programLabel: String
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
  tripId: Int
  vesselId: Int
}

input MetierVOInput {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  gear: ReferentialVOInput
  id: Int
  label: String
  levelId: Int
  name: String
  rankOrder: Int
  statusId: Int
  taxonGroup: TaxonGroupVOInput
  updateDate: Date
  validityStatusId: Int
}

input ObservedLocationFilterVOInput {
  endDate: Date
  locationId: Int
  locationIds: [Int]
  programLabel: String
  recorderDepartmentId: Int
  recorderPersonId: Int
  startDate: Date
  observerPersonIds: Int
}

input ObservedLocationSaveOptionsInput {
  withLanding: Boolean
}

input ObservedLocationVOInput {
  comments: String
  controlDate: Date
  creationDate: Date
  endDateTime: Date
  id: Int
  landings: [LandingVOInput]
  location: LocationVOInput
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  observers: [PersonVOInput]
  program: ProgramVOInput
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  startDateTime: Date
  updateDate: Date
  validationDate: Date
}

input OperationFilterVOInput {
  recorderDepartmentId: Int
  tripId: Int
}

input OperationGroupVOInput {
  comments: String
  controlDate: Date
  fishingAreas: [FishingAreaVOInput]
  gearMeasurementValues: Map_Integer_StringScalar
  gearMeasurements: [MeasurementVOInput]
  hasCatch: Boolean
  id: Int
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  metier: MetierVOInput
  packets: [PacketVOInput]
  physicalGear: PhysicalGearVOInput
  physicalGearId: Int
  products: [ProductVOInput]
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrderOnPeriod: Int
  recorderDepartment: DepartmentVOInput
  samples: [SampleVOInput]
  trip: TripVOInput
  tripId: Int
  updateDate: Date
  validationDate: Date
}

input OperationVOInput {
  batches: [BatchVOInput]
  catchBatch: BatchVOInput
  comments: String
  controlDate: Date
  endDateTime: Date
  fishingAreas: [FishingAreaVOInput]
  fishingEndDateTime: Date
  fishingStartDateTime: Date
  gearMeasurementValues: Map_Integer_StringScalar
  gearMeasurements: [MeasurementVOInput]
  hasCatch: Boolean
  id: Int
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  metier: MetierVOInput
  physicalGear: PhysicalGearVOInput
  physicalGearId: Int
  positions: [VesselPositionVOInput]
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrderOnPeriod: Int
  recorderDepartment: DepartmentVOInput
  samples: [SampleVOInput]
  startDateTime: Date
  trip: TripVOInput
  tripId: Int
  updateDate: Date
  validationDate: Date
}

input PacketCompositionVOInput {
  id: Int
  rankOrder: Int
  ratios: [Int]
  taxonGroup: ReferentialVOInput
}

input PacketVOInput {
  comments: String
  composition: [PacketCompositionVOInput]
  controlDate: Date
  id: Int
  number: Int
  operation: OperationVOInput
  operationId: Int
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  sampledWeights: [Float]
  updateDate: Date
  validationDate: Date
  weight: Float
}

input PageInput {
  offset: Long!
  size: Int!
  sortBy: String
  sortDirection: SortDirection
}

input ParameterVOInput {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  levelId: Int
  name: String
  qualitativeValues: [ReferentialVOInput]
  rankOrder: Int
  statusId: Int
  type: String
  updateDate: Date
  validityStatusId: Int
}

input PersonFilterVOInput {
  email: String
  excludedIds: [Int]
  firstName: String
  id: Int
  includedIds: [Int]
  label: String
  lastName: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  pubkey: String
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
  userProfileId: Int
  userProfileIds: [Int]
  userProfiles: [String]
}

input PersonVOInput {
  avatar: String
  creationDate: Date
  department: DepartmentVOInput
  email: String
  firstName: String
  hasAvatar: Boolean
  id: Int
  lastName: String
  mainProfile: String
  profiles: [String]
  pubkey: String
  statusId: Int
  updateDate: Date
  username: String
  usernameExtranet: String
}

input PhysicalGearFilterVOInput {
  endDate: Date
  locationId: Int
  programLabel: String
  recorderDepartmentId: Int
  recorderPersonId: Int
  startDate: Date
  tripId: Int
  vesselId: Int
}

input PhysicalGearVOInput {
  comments: String
  controlDate: Date
  creationDate: Date
  gear: ReferentialVOInput
  id: Int
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  program: ProgramVOInput
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  trip: TripVOInput
  tripId: Int
  updateDate: Date
  validationDate: Date
}

input PmfmStrategyVOInput {
  acquisitionLevel: String
  acquisitionNumber: Int
  defaultValue: Float
  fraction: ReferentialVOInput
  fractionId: Int
  gearIds: [Int]
  gears: [String]
  id: Int
  isMandatory: Boolean
  matrix: ReferentialVOInput
  matrixId: Int
  maxValue: Float
  method: ReferentialVOInput
  methodId: Int
  minValue: Float
  parameter: ReferentialVOInput
  parameterId: Int
  pmfm: PmfmVOInput
  pmfmId: Int
  rankOrder: Int
  referenceTaxonIds: [Int]
  strategyId: Int
  taxonGroupIds: [Int]
  updateDate: Date
}

input PmfmVOInput {
  comments: String
  completeName: String
  creationDate: Date
  defaultValue: Float
  description: String
  entityName: String
  fractionId: Int
  id: Int
  isCalculated: Boolean
  isEstimated: Boolean
  label: String
  levelId: Int
  matrixId: Int
  maxValue: Float
  maximumNumberDecimals: Int
  methodId: Int
  minValue: Float
  name: String
  parameterId: Int
  qualitativeValues: [ReferentialVOInput]
  rankOrder: Int
  signifFiguresNumber: Int
  statusId: Int
  type: String
  unitId: Int
  unitLabel: String
  updateDate: Date
  validityStatusId: Int
}

input ProductVOInput {
  batch: BatchVOInput
  batchId: Int
  comments: String
  controlDate: Date
  cost: Float
  creationDate: Date
  dressingId: Int
  id: Int
  individualCount: Int
  label: String
  landing: LandingVOInput
  landingId: Int
  measurementValues: Map_Integer_StringScalar
  operation: OperationVOInput
  operationId: Int
  preservationId: Int
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  sale: SaleVOInput
  saleId: Int
  saleType: ReferentialVOInput
  sizeCategoryId: Int
  subgroupCount: Float
  taxonGroup: ReferentialVOInput
  updateDate: Date
  validationDate: Date
  weight: Float
  weightCalculated: Boolean!
}

input ProgramFilterVOInput {
  excludedIds: [Int]
  id: Int
  includedIds: [Int]
  label: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
  withProperty: String
}

input ProgramSaveOptionsInput {
  withStrategies: Boolean
}

input ProgramVOInput {
  comments: String
  creationDate: Date
  description: String
  gearClassification: ReferentialVOInput
  gearClassificationId: Int
  id: Int
  label: String
  locationClassificationIds: [Int]
  locationClassifications: [ReferentialVOInput]
  locationIds: [Int]
  locations: [ReferentialVOInput]
  name: String
  properties: Map_String_StringScalar
  statusId: Int
  strategies: [StrategyVOInput]
  taxonGroupType: ReferentialVOInput
  taxonGroupTypeId: Int
  updateDate: Date
}

input QuantificationMeasurementVOInput {
  alphanumericalValue: String
  controlDate: Date
  creationDate: Date
  digitCount: Int
  entityName: String
  id: Int
  isReferenceQuantification: Boolean
  numericalValue: Float
  pmfmId: Int!
  precisionValue: Float
  qualitativeValue: ReferentialVOInput
  qualityFlagId: Int
  rankOrder: Short
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  subgroupNumber: Short
  updateDate: Date
  validationDate: Date
}

input ReferentialFilterVOInput {
  excludedIds: [Int]
  id: Int
  includedIds: [Int]
  label: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
}

input ReferentialVOInput {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  levelId: Int
  name: String
  rankOrder: Int
  statusId: Int
  updateDate: Date
  validityStatusId: Int
}

input SaleVOInput {
  comments: String
  controlDate: Date
  creationDate: Date
  endDateTime: Date
  id: Int
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  observers: [PersonVOInput]
  products: [ProductVOInput]
  program: ProgramVOInput
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  saleLocation: LocationVOInput
  saleType: ReferentialVOInput
  samples: [SampleVOInput]
  startDateTime: Date
  trip: TripVOInput
  tripId: Int
  updateDate: Date
  validationDate: Date
  vesselSnapshot: VesselSnapshotVOInput
}

input SampleVOInput {
  batch: BatchVOInput
  batchId: Int
  children: [SampleVOInput]
  comments: String
  controlDate: Date
  creationDate: Date
  id: Int
  individualCount: Int
  label: String
  landing: LandingVOInput
  landingId: Int
  matrix: ReferentialVOInput
  matrixId: Int
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  operation: OperationVOInput
  operationId: Int
  parent: SampleVOInput
  parentId: Int
  program: ProgramVOInput
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  rankOrder: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  sampleDate: Date
  size: Float
  sizeUnit: String
  taxonGroup: ReferentialVOInput
  taxonName: TaxonNameVOInput
  updateDate: Date
  validationDate: Date
}

input SoftwareVOInput {
  creationDate: Date
  id: Int
  label: String
  name: String
  properties: Map_String_StringScalar
  statusId: Int
  updateDate: Date
}

input StrategyDepartmentVOInput {
  department: ReferentialVOInput
  id: Int
  location: ReferentialVOInput
  privilege: ReferentialVOInput
  strategyId: Int
  updateDate: Date
}

input StrategyFilterVOInput {
  endDate: Date
  excludedIds: [Int]
  id: Int
  includedIds: [Int]
  label: String
  levelIds: [Int]
  levelLabels: [String]
  name: String
  programIds: [Int]
  programLabels: [String]
  referenceTaxonIds: [Int]
  searchAttribute: String
  searchJoin: String
  searchText: String
  startDate: Date
  statusIds: [Int]
  withProperty: String
}

input StrategyVOInput {
  analyticReference: String
  appliedStrategies: [AppliedStrategyVOInput]
  comments: String
  creationDate: Date
  denormalizedPmfms: [DenormalizedPmfmStrategyVOInput]
  departments: [StrategyDepartmentVOInput]
  description: String
  gearIds: [Int]
  gears: [ReferentialVOInput]
  id: Int
  label: String
  name: String
  pmfms: [PmfmStrategyVOInput]
  programId: Int
  statusId: Int
  taxonGroupIds: [Int]
  taxonGroups: [TaxonGroupStrategyVOInput]
  taxonNameIds: [Int]
  taxonNames: [TaxonNameStrategyVOInput]
  updateDate: Date
}

input TaxonGroupStrategyVOInput {
  priorityLevel: Int
  strategyId: Int
  taxonGroup: TaxonGroupVOInput
}

input TaxonGroupVOInput {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  levelId: Int
  name: String
  rankOrder: Int
  statusId: Int
  taxonNames: [TaxonNameVOInput]
  updateDate: Date
  validityStatusId: Int
}

input TaxonNameFilterVOInput {
  excludedIds: [Int]
  id: Int
  includedIds: [Int]
  label: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  referenceTaxonId: Int
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
  taxonGroupId: Int
  taxonGroupIds: [Int]
  withSynonyms: Boolean
}

input TaxonNameStrategyVOInput {
  isReferent: Boolean
  priorityLevel: Int
  referenceTaxonId: Int
  strategyId: Int
  taxonName: TaxonNameVOInput
}

input TaxonNameVOInput {
  comments: String
  completeName: String
  creationDate: Date
  description: String
  endDate: Date
  entityName: String
  id: Int
  isNaming: Boolean
  isReferent: Boolean
  isVirtual: Boolean
  label: String
  levelId: Int
  name: String
  rankOrder: Int
  referenceTaxonId: Int
  startDate: Date
  statusId: Int
  taxonomicLevelId: Int
  updateDate: Date
  upperRank: Int
  validityStatusId: Int
}

input TripFilterVOInput {
  endDate: Date
  locationId: Int
  programLabel: String
  recorderDepartmentId: Int
  recorderPersonId: Int
  startDate: Date
  tripId: Int
  vesselId: Int
}

input TripSaveOptionsInput {
  withLanding: Boolean
  withOperation: Boolean
  withOperationGroup: Boolean
}

input TripVOInput {
  comments: String
  controlDate: Date
  creationDate: Date
  departureDateTime: Date
  departureLocation: LocationVOInput
  fishingArea: FishingAreaVOInput
  gears: [PhysicalGearVOInput]
  id: Int
  landing: LandingVOInput
  landingId: Int
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  metiers: [MetierVOInput]
  observedLocation: ObservedLocationVOInput
  observedLocationId: Int
  observers: [PersonVOInput]
  operationGroups: [OperationGroupVOInput]
  operations: [OperationVOInput]
  program: ProgramVOInput
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  returnDateTime: Date
  returnLocation: LocationVOInput
  sale: SaleVOInput
  sales: [SaleVOInput]
  updateDate: Date
  validationDate: Date
  vesselSnapshot: VesselSnapshotVOInput
}

input UserEventFilterVOInput {
  issuer: String
  recipient: String
}

input UserEventVOInput {
  content: String
  creationDate: Date
  eventType: String
  hash: String
  id: Int
  issuer: String
  readSignature: String
  recipient: String
  signature: String
  updateDate: Date
}

input UserSettingsVOInput {
  content: String
  id: Int
  issuer: String
  latLongFormat: String
  locale: String
  nonce: String
  updateDate: Date
}

input VesselActivityVOInput {
  comments: String
  date: Date
  landingId: Int
  measurementValues: Map_Integer_StringScalar
  metiers: [ReferentialVOInput]
  observedLocationId: Int
  rankOrder: Int
  tripId: Int
}

input VesselFeaturesFilterVOInput {
  vesselId: Int
}

input VesselFeaturesVOInput {
  administrativePower: Int
  basePortLocation: LocationVOInput
  comments: String
  controlDate: Date
  creationDate: Date
  endDate: Date
  exteriorMarking: String
  grossTonnageGrt: Float
  grossTonnageGt: Float
  id: Int
  lengthOverAll: Float
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  name: String
  program: ProgramVOInput
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  startDate: Date
  updateDate: Date
  validationDate: Date
}

input VesselFilterVOInput {
  date: Date
  programLabel: String
  searchText: String
  statusIds: [Int]
  vesselFeaturesId: Int
  vesselId: Int
}

input VesselPositionVOInput {
  controlDate: Date
  dateTime: Date
  id: Int
  latitude: Float
  longitude: Float
  operation: OperationVOInput
  operationId: Int
  qualityFlagId: Int
  recorderDepartment: DepartmentVOInput
  updateDate: Date
  validationDate: Date
}

input VesselRegistrationFilterVOInput {
  vesselId: Int
}

input VesselRegistrationVOInput {
  endDate: Date
  id: Int
  intRegistrationCode: String
  qualityFlagId: Int
  registrationCode: String
  registrationLocation: LocationVOInput
  startDate: Date
}

input VesselSnapshotVOInput {
  administrativePower: Int
  basePortLocation: LocationVOInput
  comments: String
  controlDate: Date
  creationDate: Date
  endDate: Date
  exteriorMarking: String
  grossTonnageGrt: Float
  grossTonnageGt: Float
  id: Int
  lengthOverAll: Float
  measurementValues: Map_Integer_StringScalar
  measurements: [MeasurementVOInput]
  name: String
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  registrationCode: String
  registrationLocation: LocationVOInput
  startDate: Date
  updateDate: Date
  validationDate: Date
  vesselStatusId: Int
  vesselType: ReferentialVOInput
}

input VesselVOInput {
  comments: String
  controlDate: Date
  creationDate: Date
  features: VesselFeaturesVOInput
  id: Int
  program: ProgramVOInput
  qualificationComments: String
  qualificationDate: Date
  qualityFlagId: Int
  recorderDepartment: DepartmentVOInput
  recorderPerson: PersonVOInput
  registration: VesselRegistrationVOInput
  statusId: Int
  updateDate: Date
  validationDate: Date
  vesselType: ReferentialVOInput
}


"Built-in java.math.BigDecimal"
scalar BigDecimal

"Built-in scalar representing an instant in time"
scalar Date

"Long type"
scalar Long

"Built-in scalar for map-like structures"
scalar Map_Integer_StringScalar

"Built-in scalar for map-like structures"
scalar Map_String_List_ObjectScalar

"Built-in scalar for map-like structures"
scalar Map_String_Map_String_LongScalar

"Built-in scalar for map-like structures"
scalar Map_String_ObjectScalar

"Built-in scalar for map-like structures"
scalar Map_String_StringScalar

"Built-in scalar for dynamic values"
scalar ObjectScalar

"Built-in Short as Int"
scalar Short

"Use SPQR's SchemaPrinter to remove this from SDL"
scalar UNREPRESENTABLE
